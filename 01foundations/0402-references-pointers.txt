
1. References
2. References and Functions
3. Pointers
4. Pointers and Functions
5. References vs Pointers

==============================================================

1. References

  * The & symbol can mean one of two things:
  1. it can specify that a variable is being declared as a reference
  (when it appears on the LEFT side of a variable initialization)
  int& j = i; // the typeof j IS STILL int. it's referencing the same memory address that i is referencing.
  // compare with
  int j = i; // j takes the then-value of i

  2. it can return a memory address of a variable
  i. (when is appears on the RIGHT side of a variable definition)
  string i = "5";
  string* pointer_to_i = &i;
  // compiler will catch an error if there is no *
  // could i also write something like?
  //      string& pointer_to_i = &i

  ii. when it appears before a previously defined variable)
  cout << "look: " << &j << "\n";

==============================================================

2. References and Functions

  A variable can be passed into a function either by value or by reference. 

  // Notice that a function must specify that it is going to accept a reference
  void functionA(int a){ // do something to a}
  void functionB(int& a){ // do something to a}
  auto i = 5;
  functionA(&i) // compile error
  functionB(i)

==============================================================

3. Pointers

LEFT
Pointers, *, are used to store a memory address.
Their type is of "memory address."
However, the type of the variable whose address is being accessed must
also be specified.
string* pointer_to_i = &i;

RIGHT
Dereferencing is the retrieval of the object to which a pointer points.
int i = 5;
    // A pointer pointer_to_i is declared and initialized to the address of i.
    int* pointer_to_i = &i;

    // Print the memory addresses of i and j
    cout << "The address of i is:          " << &i << "\n";
    cout << "The variable pointer_to_i is: " << pointer_to_i << "\n";
    cout << "value of the var pointed to by pointer_to_i is: " << *pointer_to_i << "\n";

==============================================================

4. Pointers and Functions

  Notice that a function must specify that it is going to accept a pointer,
  and a pointer must be supplied to it.
  How does this differ to reference function usage?

  void AddOne(int* j)
  {
      // Dereference the pointer and increment the int being pointed to.
      (*j)++;
  }

  int main()
  {
      int i = 1;
      cout << "The value of i is: " << i << "\n";

      // Declare a pointer to i:
      int* pi = &i;
      AddOne(pi);
      cout << "The value of i is now: " << i << "\n";
  }

also...
 If a pointer is passed to a function and then assigned to a variable in
 the function that goes out of scope after the function finishes executing,
 then the pointer will have undefined behavior at that point - the memory
 it is pointing to might be overwritten by other parts of the program.

n the example below, a reference is passed into a function and a pointer is
returned. This is safe since the pointer being returned points to a
reference - a variable that exists outside of the function and will not go
 out of scope in the function.

 int* AddOne(int& j)
 {
     // Increment the referenced int and return the
     // address of j.
     j++;
     return &j;
 }

 int main()
 {
     int i = 1;
     cout << "The value of i is: " << i << "\n";

     // Declare a pointer and initialize to the value
     // returned by AddOne:
     int* my_pointer = AddOne(i);
     cout << "The value of i is now: " << i << "\n";
     cout << "The value of the int pointed to by my_pointer is: " << *my_pointer << "\n";
 }

==============================================================

5. References vs Pointers

Both references and pointers are fundamentally a machine address with a type.

However, here are some key differences:

  i. Pointers can be declared without initialization. This means we can pass an uninitialized pointer to a function who then internally performs the initialization for us.

  ii. Pointers can be reassigned to another memory block on the heap. A reference only refers to one thing.

  iii. References are usually easier to use (depending on the expertise level of the programmer). Sometimes however, if a third-party function is used without properly looking at the parameter definition, it might go unnoticed that a value has been modified

