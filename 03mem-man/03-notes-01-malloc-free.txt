
1. Allocating Dynamic Memory 
2. malloc and calloc
3. Syntax -> Casting
4. realloc
5. Freeing up memory

================================================================

1. Allocating Dynamic Memory 

  To allocate dynamic memory on the heap means:
    i. to make a contiguous memory area accessible to the program at runtime
    ii. to mark this memory as occupied so that no one else can write there by mistake

  Reserving memory on the heap can be done by two functions*:
    i. malloc (Memory allocation)
    ii. calloc (Cleared memory allocation)


  * These functions require either stdlib.h or malloc.h

================================================================

2. malloc and calloc

  malloc is used to dynamically allocate a single large block of memory
  calloc is used to dynamically allocate the specified number of blocks of memory (each block is initialized with a default value of '0')

  Both functions return a pointer of type void, which can be cast into a pointer of any form.

  If there isn't enough space for allocation, a NULL pointer is returned.

  malloc, calloc, and free are relics of c
  c++ introduced object oriented programming, which required different methods (new and delete)


================================================================

3. Syntax -> Casting

  PROBLEM:

  As mentioned above, malloc and calloc return void types:

    void *p = malloc(sizeof(int));
    printf("address=%p, value=%d\n", p, *p); <---- this line will generate an error/warning

  Using them in this manner will either generate warnings or errors(depending on the system) when we try to use the pointers.

  The problem with void pointers is that there is no way of knowing the offset to the end of the allocated memory block. For an int, this would be 4 bytes but for a double, the offset would be 8 bytes.

  SOLUTION:

  In order to retrieve the entire block of memory that has been reserved, we need to know the data type and the way to achieve this with malloc is by casting the return pointer: 

    pointer_name = (cast-type*) malloc(size);
    pointer_name = (cast-type*) calloc(num_elems, size_elem);

  For example:
    int *p = (int*)malloc(sizeof(int));

  At compile time, only the space for the pointer is reserved (on the stack). When the pointer is initialized, a block of memory of sizeof(int) bytes is allocated (on the heap) at program runtime. The pointer on the stack then points to this memory location on the heap.

================================================================

4. realloc

  The size of the memory area reserved with malloc or calloc can be increased or decreased with the realloc function.

    pointer_name = (cast-type*) realloc( (cast-type*)old_memblock, new_size );

  To do this, the function must be given a pointer to the previous memory area and the new size in bytes. Depending on the compiler, the reserved memory area is either (a) expanded or reduced internally (if there is still enough free heap after the previously reserved memory area) or (b) a new memory area is reserved in the desired size and the old memory area is released afterwards.

  The data from the old memory area is retained, i.e. if the new memory area is larger, the data will be available within new memory area as well. If the new memory area is smaller, the data from the old area will be available only up until the site of the new area - the rest is lost.

================================================================

5. Freeing up memory

  If memory has been reserved, it should be released as soon as it is no longer needed. If memory is reserved regularly without releasing it again, the memory capacity may be exchausted at some point. 

  If the RAM memory is completely used up, the data is swapped out to the hard disk, which slows down the computer significantly.

  The free function releases the reserved memory area so that it can be used again or made available to other programs.

  Here are some things to keep in mind when using free:
    i. free can only free memory that was reserved with malloc or calloc
    ii. free can only release memory that has not been released before (releasing the same block will result in an error)
    iii. if a function has pointers initialized with malloc/calloc, the memory they point to should be freed(or returned) before exiting the scope of the function.

================================================================