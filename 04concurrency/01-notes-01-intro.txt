1. What is a concurrent program?
2. What is the difference between synchronous and asynchronous?
3. Ways to run programs concurrently
4. What is a task?
5. What is a thread?
6. Use-cases: Threads VS Tasks

===============================================================

1. Concurrent programs are programs that use multiple threads

2. synchronous vs asynchronous
  - in a synchronous program, all processing happens sequentially
  - in an asynchronous program, processing happens in parallel with respect to time

3. There are two ways to run programs concurrently:
  i. multiple processes
    - note: the OS will provide:
      a. safety mechanisms for multiple-process programs
      b. high-level communication interfaces
  ii. multiple threads within a single process
    -threads in a process share the same address space


4. what is a process (AKA task)?
  - it is a computer program at runtime, made of:
    i. the runtime environment provided by the OS AND...
    ii. the embedded binary code of the program during execution
  - in c++, tasks can be created a couple of different ways. section 03 of these concurrency notes

  - note: whenever I execute a file creates threads and emplaces them into a vector, HTOP shows new processes being created for each thread? This is unexpected... what is happening?

5. what is a thread? a thread:
  - represents a concurrent execution unit within a process"
  - is a "light-weight" process
  - can access the shared memory of the processor (shared by other threads within the same process)
  - shares an address space, processors, files, and network connections with other threads of the same process


======================================================================

6. Use-cases: Threads VS Tasks

  With tasks, the system takes care of many details (e.g. join). With threads, the programmer is responsible for many details. As far as resources go, threads are usually more heavy-weight as they are generated by the operating system (OS). It takes time for the OS to be called and to allocate memory / stack / kernel data structures for the thread. Also, destroying the thread is expensive. Tasks on the other hand are more light-weight as they will be using a pool of already created threads (the "thread pool").

  Threads and tasks are used for different problems. 
  
  Threads have more to do with latency. When you have functions that can block (e.g. file input, server connection), threads can prevent the program from being blocked, when e.g. the server is waiting for a response. 
  
  Tasks on the otherhand focus on throughput, where many operations are executed in parallel.