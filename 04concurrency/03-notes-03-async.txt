1. async vs thread
2. std::launch
3. tasks vs threads

==========================================================================

1. async vs thread

  async is an alternative to thread. here are some key differences:
    i. with async, TASKS are created; with threads, threads are created

    ii. with async, the system decides whether to run the code in parallel or synchronously (unless the programmer specifies which should be run)

    iii. async uses a lot less code
      - no thread
      - no promise
      - no special function that requires moving a promise into it
      - no join

  async internally: 
    i. creates a promise and gets a future from it
    ii. runs a template function that takes the promise, calls the function, and sets the value or exception of that promise
  

==========================================================================

2. std::launch
    std::launch is an enum class type.
    this enum class type defines a bitmask type

    std::launch::async -> launches a new thread to execute the function (enforce parallel execution)

    std::launch::deferred -> the call to the function is deferred until ftr::wait or ftr::get is called.

    int values unspecified?


  std::async makes it possible to control the amount of concurrency by passing an optional launch parameter, which enforces either synchronous or asynchronous behavior. 
  
  Leaving this parameter blank leaves the decision to the system, which will choose an optimal path that prevents an overload of threads (overloading would  slow down the system as threads consume resources for both management and communication). 
  
  If we were to use too many threads, the increased resource consumption would outweigh the advantages of parallelism and slow down the program. By leaving the decision to the system, we can ensure that the number of threads is chosen in a carefully balanced way that optimizes runtime performance by looking at the current workload of the system and the multi-core architecture of the system.

==========================================================================

3. tasks vs threads

  With tasks, the system takes care of many details (e.g. join). With threads, the programmer is responsible for many details. 
  
  As far as resources go, threads are usually more heavy-weight as they are generated by the operating system (OS). It takes time for the OS to be called and to allocate memory / stack / kernel data structures for the thread. Also, destroying the thread is expensive. Tasks on the other hand are more light-weight as they will be using a pool of already created threads (the "thread pool").

  Threads and tasks are used for different problems. Threads have more to do with latency. When you have functions that can block (e.g. file input, server connection), threads can avoid the program to be blocked, when e.g. the server is waiting for a response. Tasks on the other hand focus on throughput, where many operations are executed in parallel.

  async should NOT be used to launch tasks that handle input/output, manipulate mutexes, or interact other threads.

  async should only be used for the simplest cases

  Quiz: threads vs tasks
    1. The concurrency abstraction level of _____ is low.
    2. The concurrency abstraction level of _____ is high.
    3. Resource usage can be described as heavy-weight for _____.
    4. Resource usage can be described as light-weight for _____.
    5. Primary use-cases for _____ are applications where latency needs to be improved.
    66. Primary use-cases for _____ are applications where throughput needs to be high.