1. What is a data race?
2. Why are data races bad?
3. Where are they often found?
4. How can they be avoided?

===========================================================================

1. What is a data race?

  A data race occurs when two concurrent threads are accessing the same memory location while at least one of them is modifying the data. In this scenario, the value at the memory location is completely undefined. 

  Depending on the system scheduler, a second thread will be executed at an unknown point in time and thus see different data at the memory location with each execution. The two threads will race to get access to a memory location first, with the content at the memory location depending on the result of the race.

===========================================================================

2. Why are data races bad?

  Depending on the type of program, the result of a data race might be anything from a crash to a security breach in which data is read by a thread from which it was not meant to be read (such as a user password or other sensitive information). 

===========================================================================

3. Where are they often found? (answer: data structures with pointers as member variables)

  When passing a complex data structure there are sometimes pointer variables hidden within, that point to a (potentially) shared data buffer - which might cause a data race even though the programmer believes that the copied data will effectively preempt this.

===========================================================================

4. How can they be avoided (in cases related to pointers)?

  Short Answer: Implement the rule of 5
    - modified copy constructor (for a deep copy) -> 04-code-03-data-races.cpp
    - move semantics -> 04-code-04-data-races.cpp
      - with a raw pointer
      - with unique_ptr

  Classes from the standard template library usually implement a deep copy behavior by default (such as std::vector). 
  
  When dealing with proprietary data types, this is not guaranteed. The only safe way to tell whether a data structure can be safely passed is by looking at its implementation: Does it contain only atomic data types or are there pointers somewhere? If this is the case, does the data structure implement the copy constructor (and the assignment operator) correctly? Also, if the data structure under scrutiny contains sub-objects, their respective implementation has to be analyzed as well to ensure that deep copies are made everywhere.

  Unfortunately, one of the primary concepts of object-oriented programming - information hiding - often prevents us from looking at the implementation details of a class - we can only see the interface, which does not tell us what we need to know to make sure that an object of the class may be safely passed by value.
